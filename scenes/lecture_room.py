import pygame
import os
import math
from .base_scene import BaseScene

class LectureRoomScene(BaseScene):
    def __init__(self, game):
        super().__init__(game)
        self.player_x = self.screen_width * 0.25
        self.player_y = self.screen_height * 0.7
        self.player_speed = 5
        self.door_rect = pygame.Rect(self.screen_width // 2 - 50, self.screen_height * 0.4 - 75, 100, 150)
        self.player_rotation = 0
        self.is_spinning = False
        self.spin_timer = 0
        self.dialog_active = False
        self.current_dialog = None
        self.dialog_timer = 0
        
        # NPC –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
        self.npcs = [
            {'x': self.screen_width * 0.8, 'y': self.screen_height * 0.2, 'speed': 3, 'strategy': 'direct', 'knocked_back': False, 'knockback_timer': 0},
            {'x': self.screen_width * 0.8 + 80, 'y': self.screen_height * 0.2 + 30, 'speed': 4, 'strategy': 'right', 'knocked_back': False, 'knockback_timer': 0},
            {'x': self.screen_width * 0.8 + 160, 'y': self.screen_height * 0.2 + 60, 'speed': 5, 'strategy': 'left', 'knocked_back': False, 'knockback_timer': 0}
        ]
        
        # –°—Ç–∞—Ç–∏—á–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ê—Ä–º–∞–Ω—Å—É (–Ω–µ –æ—Ç–ª–µ—Ç–∞–µ—Ç –æ—Ç —É–¥–∞—Ä–æ–≤)
        self.armansu = {
            'x': self.screen_width * 0.1,  # –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ —ç–∫—Ä–∞–Ω–∞
            'y': self.screen_height * 0.3,  # –°—Ä–µ–¥–Ω—è—è –≤—ã—Å–æ—Ç–∞
            'speed': 8,  # –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
            'static': False  # –¢–µ–ø–µ—Ä—å –æ–Ω –¥–≤–∏–∂–µ—Ç—Å—è
        }
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.ceo_image = None
        self.lecture_343_image = None
        self.npc_images = []
        self.armansu_image = None
        self.load_images()
        
    def load_images(self):
        try:
            self.ceo_image = pygame.image.load(os.path.join('public', 'ceo.png'))
            self.ceo_image = pygame.transform.scale(self.ceo_image, (250, 350))
            
            self.lecture_343_image = pygame.image.load(os.path.join('public', '343.jpg'))
            self.lecture_343_image = pygame.transform.scale(self.lecture_343_image, (self.screen_width, self.screen_height))
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ NPC –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            npc_files = ['bakhredin.png', 'tamirlan.png', 'alikhan.png']
            for npc_file in npc_files:
                try:
                    npc_img = pygame.image.load(os.path.join('public', npc_file))
                    npc_img = pygame.transform.scale(npc_img, (300, 420))  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Å 200x280 –¥–æ 300x420
                    self.npc_images.append(npc_img)
                except pygame.error:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                    placeholder = pygame.Surface((300, 420))  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –∑–∞–≥–ª—É—à–∫–∏
                    placeholder.fill((150, 100, 200))
                    self.npc_images.append(placeholder)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ê—Ä–º–∞–Ω—Å—É
            try:
                self.armansu_image = pygame.image.load(os.path.join('public', 'armansu.png'))
                self.armansu_image = pygame.transform.scale(self.armansu_image, (300, 420))
            except pygame.error:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –ê—Ä–º–∞–Ω—Å—É
                self.armansu_image = pygame.Surface((300, 420))
                self.armansu_image.fill((100, 100, 100))  # –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –ê—Ä–º–∞–Ω—Å—É
                    
        except pygame.error as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
            self.ceo_image = pygame.Surface((250, 350))
            self.ceo_image.fill((100, 150, 200))
            
            self.lecture_343_image = pygame.Surface((self.screen_width, self.screen_height))
            self.lecture_343_image.fill((60, 100, 140))
            
            for _ in range(3):
                placeholder = pygame.Surface((300, 420))  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –∑–∞–≥–ª—É—à–∫–∏
                placeholder.fill((150, 100, 200))
                self.npc_images.append(placeholder)
    
    def reset(self, data=None):
        self.player_x = self.screen_width * 0.25
        self.player_y = self.screen_height * 0.7
        self.player_rotation = 0
        self.is_spinning = False
        self.spin_timer = 0
        self.dialog_active = False
        self.current_dialog = None
        self.dialog_timer = 0
        
        # –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–π NPC
        self.npcs = [
            {'x': self.screen_width * 0.8, 'y': self.screen_height * 0.2, 'speed': 3, 'strategy': 'direct', 'knocked_back': False, 'knockback_timer': 0},
            {'x': self.screen_width * 0.8 + 80, 'y': self.screen_height * 0.2 + 30, 'speed': 4, 'strategy': 'right', 'knocked_back': False, 'knockback_timer': 0},
            {'x': self.screen_width * 0.8 + 160, 'y': self.screen_height * 0.2 + 60, 'speed': 5, 'strategy': 'left', 'knocked_back': False, 'knockback_timer': 0}
        ]
        
        # –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ –ê—Ä–º–∞–Ω—Å—É
        self.armansu = {
            'x': self.screen_width * 0.1,
            'y': self.screen_height * 0.3,
            'speed': 8,
            'static': False
        }
    
    def handle_event(self, event):
        pass
    
    def update(self, dt):
        keys = pygame.key.get_pressed()
        
        if keys[pygame.K_LEFT] or keys[pygame.K_a]:
            self.player_x -= self.player_speed
        if keys[pygame.K_RIGHT] or keys[pygame.K_d]:
            self.player_x += self.player_speed
        if keys[pygame.K_UP] or keys[pygame.K_w]:
            self.player_y -= self.player_speed
        if keys[pygame.K_DOWN] or keys[pygame.K_s]:
            self.player_y += self.player_speed
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        if self.is_spinning:
            self.player_rotation += 15  # –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è
            self.spin_timer -= 1
            if self.spin_timer <= 0:
                self.is_spinning = False
                self.player_rotation = 0
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        self.player_x = max(125, min(self.screen_width - 125, self.player_x))
        self.player_y = max(175, min(self.screen_height - 175, self.player_y))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ NPC
        for i, npc in enumerate(self.npcs):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –∏–≥—Ä–æ–∫–æ–º (—Ç–æ—á–Ω—ã–π —Ä–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è)
            player_rect = pygame.Rect(self.player_x - 125, self.player_y - 175, 250, 350)
            npc_rect = pygame.Rect(npc['x'] - 150, npc['y'] - 210, 300, 420)  # –¢–æ—á–Ω—ã–π —Ä–∞–¥–∏—É—Å –¥–ª—è NPC
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –ê—Ä–º–∞–Ω—Å—É —Å –¥—Ä—É–≥–∏–º–∏ NPC (–∑–∞—â–∏—Ç–∞ –∏–≥—Ä–æ–∫–∞)
            armansu_rect = pygame.Rect(self.armansu['x'] - 150, self.armansu['y'] - 210, 300, 420)
            
            if armansu_rect.colliderect(npc_rect) and not npc['knocked_back']:
                # –ê—Ä–º–∞–Ω—Å—É –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ—Ç –¥—Ä—É–≥–∏—Ö NPC
                npc['knocked_back'] = True
                npc['knockback_timer'] = 60  # 1 —Å–µ–∫—É–Ω–¥–∞ –ø—Ä–∏ 60 FPS
                
                # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–µ—Ç–∞ –æ—Ç –ê—Ä–º–∞–Ω—Å—É
                dx = npc['x'] - self.armansu['x']
                dy = npc['y'] - self.armansu['y']
                distance = math.sqrt(dx * dx + dy * dy)
                if distance > 0:
                    npc['knockback_dx'] = (dx / distance) * 20
                    npc['knockback_dy'] = (dy / distance) * 20
                else:
                    npc['knockback_dx'] = 15
                    npc['knockback_dy'] = -15
                
                # –ê—Ä–º–∞–Ω—Å—É –º–æ–ª—á–∞ –∑–∞—â–∏—â–∞–µ—Ç (–±–µ–∑ –¥–∏–∞–ª–æ–≥–∞)
                # if not self.dialog_active:
                #     self.dialog_active = True
                #     self.dialog_timer = 90  # 1.5 —Å–µ–∫—É–Ω–¥—ã
                #     self.current_dialog = "–ê—Ä–º–∞–Ω—Å—É: –ó–∞—â–∏—â–∞—é —Ç–µ–±—è! üí™"
            
            if player_rect.colliderect(npc_rect) and not npc['knocked_back']:
                # NPC –∫–∞—Å–∞–µ—Ç—Å—è –∏–≥—Ä–æ–∫–∞ - —É–ª–µ—Ç–∞–µ—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É
                npc['knocked_back'] = True
                npc['knockback_timer'] = 60  # 1 —Å–µ–∫—É–Ω–¥–∞ –ø—Ä–∏ 60 FPS
                
                # –ó–∞–ø—É—Å–∫ –≤—Ä–∞—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
                if not self.is_spinning:
                    self.is_spinning = True
                    self.spin_timer = 90  # 1.5 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ 60 FPS
                
                # –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
                if not self.dialog_active:
                    self.dialog_active = True
                    self.dialog_timer = 120  # 2 —Å–µ–∫—É–Ω–¥—ã
                    if i == 0:
                        self.current_dialog = "Bakhredin: –°–∫–∞–∂–∏—Ç–µ –î–ê–ê–ê–ê–ê"
                    elif i == 1:
                        self.current_dialog = "Tamirlan: –ú–µ–π—Å–æ–Ω –º–∞—Ä–¥–∂–µ–ª–∞ —Ç—É—Ñ–ª–∏ –∫—É–ø–∏—Ç—å 44 —Ä–∞–∑–º–µ—Ä"
                    else:
                        self.current_dialog = "Alikhan: –ù—É –∏? –õ—é–±–ª—é –ø–ª–∞–≤–∞—Ç—å, —Ç—ã –¥–∞ –°–ï–û?"
                
                # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ NPC
                if i == 0:  # –ü–µ—Ä–≤—ã–π NPC - —É–ª–µ—Ç–∞–µ—Ç –≤–ª–µ–≤–æ
                    npc['knockback_dx'] = -15
                    
                    npc['knockback_dy'] = -5
                elif i == 1:  # –í—Ç–æ—Ä–æ–π NPC - —É–ª–µ—Ç–∞–µ—Ç –≤–ø—Ä–∞–≤–æ
                    npc['knockback_dx'] = 15
                    npc['knockback_dy'] = -5
                else:  # –¢—Ä–µ—Ç–∏–π NPC - —É–ª–µ—Ç–∞–µ—Ç –≤–≤–µ—Ä—Ö
                    npc['knockback_dx'] = 0
                    npc['knockback_dy'] = -20
            
            if npc['knocked_back']:
                # NPC –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–ª–µ—Ç–∞
                npc['x'] += npc['knockback_dx']
                npc['y'] += npc['knockback_dy']
                npc['knockback_timer'] -= 1
                
                # –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –æ—Ç–ª–µ—Ç–∞
                npc['knockback_dx'] *= 0.95
                npc['knockback_dy'] *= 0.95
                
                if npc['knockback_timer'] <= 0:
                    npc['knocked_back'] = False
            else:
                # –û–±—ã—á–Ω–æ–µ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
                target_x = self.player_x
                target_y = self.player_y
                
                # –†–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ NPC
                if npc['strategy'] == 'right':
                    target_x = self.player_x + 100
                elif npc['strategy'] == 'left':
                    target_x = self.player_x - 100
                
                # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
                dx = target_x - npc['x']
                dy = target_y - npc['y']
                
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞
                distance = math.sqrt(dx * dx + dy * dy)
                if distance > 0:
                    npc['x'] += (dx / distance) * npc['speed']
                    npc['y'] += (dy / distance) * npc['speed']
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è NPC
            npc['x'] = max(150, min(self.screen_width - 150, npc['x']))  # –¢–æ—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
            npc['y'] = max(210, min(self.screen_height - 210, npc['y']))  # –¢–æ—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –ê—Ä–º–∞–Ω—Å—É (–±–µ–∑ –æ—Ç–ª–µ—Ç–∞)
        player_rect = pygame.Rect(self.player_x - 125, self.player_y - 175, 250, 350)
        armansu_rect = pygame.Rect(self.armansu['x'] - 150, self.armansu['y'] - 210, 300, 420)
        
        if player_rect.colliderect(armansu_rect) and not self.dialog_active:
            # –ê—Ä–º–∞–Ω—Å—É –º–æ–ª—á–∞ –∑–∞—â–∏—â–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ (–±–µ–∑ –¥–∏–∞–ª–æ–≥–∞)
            pass
        else:
            # –î–≤–∏–∂–µ–Ω–∏–µ –ê—Ä–º–∞–Ω—Å—É - –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –∏–≥—Ä–æ–∫–∞
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–∞–≥–∞
            nearest_enemy = None
            min_distance = float('inf')
            
            for npc in self.npcs:
                if not npc['knocked_back']:
                    dx = npc['x'] - self.player_x
                    dy = npc['y'] - self.player_y
                    distance = math.sqrt(dx * dx + dy * dy)
                    if distance < min_distance:
                        min_distance = distance
                        nearest_enemy = npc
            
            if nearest_enemy and min_distance < 400:  # –ï—Å–ª–∏ –≤—Ä–∞–≥ –±–ª–∏–∑–∫–æ –∫ –∏–≥—Ä–æ–∫—É
                # –ê—Ä–º–∞–Ω—Å—É –ª–µ—Ç–∏—Ç –∫ –≤—Ä–∞–≥—É –¥–ª—è –∑–∞—â–∏—Ç—ã
                target_x = nearest_enemy['x']
                target_y = nearest_enemy['y']
            else:
                # –ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –∏–≥—Ä–æ–∫–∞
                patrol_radius = 150
                patrol_angle = (pygame.time.get_ticks() / 1000) * 0.5  # –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
                target_x = self.player_x + math.cos(patrol_angle) * patrol_radius
                target_y = self.player_y + math.sin(patrol_angle) * patrol_radius
            
            # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
            dx = target_x - self.armansu['x']
            dy = target_y - self.armansu['y']
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞
            distance = math.sqrt(dx * dx + dy * dy)
            if distance > 0:
                self.armansu['x'] += (dx / distance) * self.armansu['speed']
                self.armansu['y'] += (dy / distance) * self.armansu['speed']
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –ê—Ä–º–∞–Ω—Å—É
            self.armansu['x'] = max(150, min(self.screen_width - 150, self.armansu['x']))
            self.armansu['y'] = max(210, min(self.screen_height - 210, self.armansu['y']))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –¥–≤–µ—Ä—å—é
        player_rect = pygame.Rect(self.player_x - 125, self.player_y - 175, 250, 350)
        if player_rect.colliderect(self.door_rect):
            self.change_scene('LectureHallScene')
        
        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥ –ø–æ ESC
        if keys[pygame.K_ESCAPE]:
            self.go_back()
        
        # –î–∏–∞–ª–æ–≥ —Ç–∞–π–º–µ—Ä
        if self.dialog_active:
            self.dialog_timer -= 1
            if self.dialog_timer <= 0:
                self.dialog_active = False
                self.current_dialog = None
    
    def draw(self, screen):
        # –§–æ–Ω
        if self.lecture_343_image:
            screen.blit(self.lecture_343_image, (0, 0))
        else:
            screen.fill((60, 100, 140))
        
        # –î–≤–µ—Ä—å
        # pygame.draw.rect(screen, (255, 255, 255, 128), self.door_rect, 2)  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        # –ò–≥—Ä–æ–∫
        if self.ceo_image:
            if self.is_spinning:
                # –ü–æ–≤–µ—Ä–Ω—É—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
                rotated_image = pygame.transform.rotate(self.ceo_image, self.player_rotation)
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                rotated_rect = rotated_image.get_rect(center=(self.player_x, self.player_y))
                screen.blit(rotated_image, rotated_rect)
            else:
                screen.blit(self.ceo_image, (self.player_x - 125, self.player_y - 175))
        else:
            if self.is_spinning:
                # –ü–æ–≤–µ—Ä–Ω—É—Ç—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –∑–∞–≥–ª—É—à–∫–∏
                rotated_surface = pygame.Surface((250, 350))
                rotated_surface.fill((100, 150, 200))
                rotated_surface = pygame.transform.rotate(rotated_surface, self.player_rotation)
                rotated_rect = rotated_surface.get_rect(center=(self.player_x, self.player_y))
                screen.blit(rotated_surface, rotated_rect)
            else:
                pygame.draw.rect(screen, (100, 150, 200), 
                               (self.player_x - 125, self.player_y - 175, 250, 350))
        
        # NPC –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
        for i, npc in enumerate(self.npcs):
            if i < len(self.npc_images):
                screen.blit(self.npc_images[i], (npc['x'] - 150, npc['y'] - 210))  # –û–±–Ω–æ–≤–∏–ª–∏ –ø–æ–∑–∏—Ü–∏—é –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            else:
                pygame.draw.rect(screen, (150, 100, 200), 
                               (npc['x'] - 150, npc['y'] - 210, 300, 420))  # –û–±–Ω–æ–≤–∏–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ê—Ä–º–∞–Ω—Å—É (—Å—Ç–∞—Ç–∏—á–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂)
        if self.armansu_image:
            screen.blit(self.armansu_image, (self.armansu['x'] - 150, self.armansu['y'] - 210))
        else:
            pygame.draw.rect(screen, (100, 100, 100), 
                           (self.armansu['x'] - 150, self.armansu['y'] - 210, 300, 420))
        
        # –¢–µ–∫—Å—Ç –Ω–∞ –¥–≤–µ—Ä–∏
        door_text = self.small_font.render('–í–æ–π—Ç–∏ –≤ –∑–∞–ª', True, (255, 255, 255))
        screen.blit(door_text, (self.screen_width // 2 - 50, self.screen_height * 0.4 + 5))
        
        # –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
        if self.dialog_active and self.current_dialog:
            dialog_width = 600
            dialog_height = 120
            dialog_x = (self.screen_width - dialog_width) // 2
            dialog_y = self.screen_height - dialog_height - 40
            pygame.draw.rect(screen, (30, 30, 30), (dialog_x, dialog_y, dialog_width, dialog_height), border_radius=16)
            pygame.draw.rect(screen, (180, 160, 100), (dialog_x, dialog_y, dialog_width, dialog_height), 4, border_radius=16)
            # –¢–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            dialog_font = pygame.font.Font(None, 36)
            lines = self.current_dialog.split("\n")
            for idx, line in enumerate(lines):
                text_surf = dialog_font.render(line, True, (230, 220, 180))
                screen.blit(text_surf, (dialog_x + 30, dialog_y + 30 + idx * 40))
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –∫–ª–∞–≤–∏—à–µ ESC
        self.draw_esc_hint(screen) 